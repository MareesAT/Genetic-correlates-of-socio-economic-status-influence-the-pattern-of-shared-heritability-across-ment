############################################################ FIGURES  ############################################################





################################## FDR

Example script for rgs raw and rgs after partialling out SES

# activate libraries
library(ggplot2)
library(RColorBrewer)
library(corrplot)
library(gridExtra)
library(grid)


######

# part I - rgs:
# - 120 rgs between mental health outcomes - uncorrected
# - 120 rgs between mental health outcomes - corrected for SES

# part II - rg changes:
# - 120 rg-changes - corrected for SES


### part I - rgs ###

# read in correlation matrices
rgs.raw <- read.csv("Correlation_matrix.csv",header=T,sep = ",")
rgs.SES <- read.csv("SES_pcor_rg_matrix.csv",header=T,sep = ",")
rownames(rgs.raw) <- rgs.raw$X
rownames(rgs.SES) <- rgs.SES$X
rgs.raw$X <- NULL
rgs.SES$X <- NULL
diag(rgs.raw) <- 1
diag(rgs.SES) <- 1

SEs.raw <- read.csv("Correlation_SE_matrix.csv",header=T,sep = ",")
SEs.SES <- read.csv("SES_pcorSE_matrix.csv",header=T,sep = ",")
rownames(SEs.raw) <- SEs.raw$X
rownames(SEs.SES) <- SEs.SES$X
SEs.raw$X <- NULL
SEs.SES$X <- NULL
diag(SEs.raw) <- 0
diag(SEs.SES) <- 0

# re-order rows & columns
colnames(rgs.raw)
order <- c("ADHD","Anxiety","MDD","Bip",
           "SCZ","Autism","Anorexia",
           "OCD","TS",
           "CanLife","Alc_freq","Alc_quan",
           "SI","AgeSI","CPD","Cess")
rgs.raw <- rgs.raw[order,order]
rgs.SES <- rgs.SES[order,order]

SEs.raw <- SEs.raw[order,order]
SEs.SES <- SEs.SES[order,order]

# re-name traits
library(data.table)
oldnames <- c("ADHD","Anxiety","MDD","Bip",
              "SCZ","Autism","Anorexia",
              "OCD","TS",
              "CanLife","Alc_freq","Alc_quan",
              "SI","AgeSI","CPD","Cess")
newnames <- c("ADHD","AnxD","MD","Bip",
              "SCZ","ASD","AN",
              "OCD","TS",
              "Cannabis","AlcFreq","AlcQuan",
              "SmkInit","AgeSmk","CigDay","SmkCes")

setnames(rgs.raw, old = oldnames, new = newnames)
setnames(rgs.SES, old = oldnames, new = newnames)

setnames(SEs.raw, old = oldnames, new = newnames)
setnames(SEs.SES, old = oldnames, new = newnames)

rownames(rgs.raw) <- colnames(rgs.raw)
rownames(rgs.SES) <- colnames(rgs.SES)

rownames(SEs.raw) <- colnames(SEs.raw)
rownames(SEs.SES) <- colnames(SEs.SES)

# make dataframe of P-values of genetic correlations
rg.P.raw <- as.data.frame(2*sapply(-abs(rgs.raw/SEs.raw), pnorm))
diag(rg.P.raw) <- 1
rg.P.SES <- as.data.frame(2*sapply(-abs(rgs.SES/SEs.SES), pnorm))
diag(rg.P.SES) <- 1

colnames(rg.P.raw) <- colnames(rgs.raw)
colnames(rg.P.SES) <- colnames(rgs.SES)

rownames(rg.P.raw) <- rownames(rgs.raw)
rownames(rg.P.SES) <- rownames(rgs.SES)

# make into lower triangles for FDR correction
rg.P.raw[lower.tri(rg.P.raw)] <- NA
diag(rg.P.raw) <- NA
rg.P.SES[lower.tri(rg.P.SES)] <- NA
diag(rg.P.SES) <- NA

rg.P.raw.FDR <- as.data.frame(matrix(p.adjust(as.vector(as.matrix(rg.P.raw)), method='fdr'),ncol=16))
rg.P.SES.FDR <- as.data.frame(matrix(p.adjust(as.vector(as.matrix(rg.P.SES)), method='fdr'),ncol=16))

# now make it into a full symmetric matrix again 
rg.P.raw.FDR[lower.tri(rg.P.raw.FDR)] <- t(rg.P.raw.FDR[upper.tri(rg.P.raw.FDR)])
diag(rg.P.raw.FDR) <- 0
rg.P.SES.FDR[lower.tri(rg.P.SES.FDR)] <- t(rg.P.SES.FDR[upper.tri(rg.P.SES.FDR)])
diag(rg.P.SES.FDR) <- 0

colnames(rg.P.raw.FDR) <- colnames(rgs.raw)
colnames(rg.P.SES.FDR) <- colnames(rgs.SES)

rownames(rg.P.raw.FDR) <- rownames(rgs.raw)
rownames(rg.P.SES.FDR) <- rownames(rgs.SES)

# save as csv
write.csv(rg.P.raw.FDR, file = "rg.P.raw.FDR.csv")
write.csv(rg.P.SES.FDR, file = "rg.P.SES.FDR.csv")

### part II - rg changes ###

change.P.SES <- read.csv("files_sign_15102019/significance_v2/Significance_SES_V2.csv",header=T,sep = ",")
rownames(change.P.SES) <- change.P.SES$X
change.P.SES$X <- NULL
diag(change.P.SES) <- 1

change.P.SES$PTSD <- NULL
change.P.SES <- change.P.SES[!(row.names(change.P.SES) %in% row.names.remove), ]

change.P.EA <- change.P.EA[order,order]
change.P.HI <- change.P.HI[order,order]
change.P.TI <- change.P.TI[order,order]
change.P.SES <- change.P.SES[order,order]

setnames(change.P.SES, old = oldnames, new = newnames)

rownames(change.P.SES) <- colnames(change.P.SES)

# make into lower triangles for FDR correction
change.P.SES[lower.tri(change.P.SES)] <- NA
diag(change.P.SES) <- NA

change.P.SES.FDR <- as.data.frame(matrix(p.adjust(as.vector(as.matrix(change.P.SES)), method='fdr'),ncol=16))

# now make it into a full symmetric matrix again 
change.P.SES.FDR[lower.tri(change.P.SES.FDR)] <- t(change.P.SES.FDR[upper.tri(change.P.SES.FDR)])
diag(change.P.SES.FDR) <- 0

colnames(change.P.SES.FDR) <- colnames(rgs.SES)

rownames(change.P.SES.FDR) <- rownames(rgs.SES)

# save as csv
write.csv(change.P.SES.FDR, file = "change.P.SES.FDR.csv")





################################## FIGURE 2 SES rgs


# activate libraries
library(ggplot2)
library(RColorBrewer)
library(corrplot)
library(gridExtra)
library(grid)

###

rgs.SES <- read.csv("rg_with_SES.18072019.TRAIT_NAME_FIXED.csv",header=T,sep = ",")
head(rgs)
summary(rgs)

library(stringr)
rgs.SES[c("trait","trait2")] <- str_split_fixed(rgs.SES$Traits, "_", 2)
colnames(rgs.SES)
rgs.SES <- rgs.SES[c("trait","SES_T1_Corr","SES_T1_Corr_SE")]

rgs.SES <-aggregate(rgs.SES, by=list(rgs.SES$trait),
                    FUN=mean, na.rm=TRUE)

rgs.SES$trait <- NULL
colnames(rgs.SES) <- c("trait","rg.SES","rg.SES.SE")

rgs <- merge(rgs,rgs.SES,by.x = "trait",by.y = "trait")
rgs <- merge(rgs,rgs.TI,by.x = "trait",by.y = "trait")

# compute p-values
colnames(rgs)
rgs$rg.SES.P <- 2*pnorm(-abs(rgs$rg.SES/rgs$rg.SES.SE))

# compute FDR-corrected p-values
rgs$rg.SES.P.FDR <- p.adjust(rgs$rg.SES.P, method = "fdr")

trait_names <- as.data.frame(matrix(c("ADHD","Anxiety","MDD","Bip",
                                      "SCZ","Autism","Anorexia",
                                      "OCD","TS",
                                      "CanLife","AlcFreq","AlcQuan",
                                      "SI","AgeSI","CPD","Cess",
                                      "ADHD","AnxD","MD","BIP",
                                      "SCZ","ASD","AN",
                                      "OCD","TS",
                                      "Cannabis","AlcFreq","AlcQuan",
                                      "SmkInit","AgeSmk",
                                      "CigDay","SmkCes",
                                      1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), 
                                    nrow = 16, ncol = 3))

colnames(trait_names) <- c("unix_name","trait.plot_name","trait.order")
rgs <- merge(rgs,trait_names,by.x = "trait",by.y = "unix_name")

rgs$trait.order <- as.numeric(as.character(rgs$trait.order))

###

# plot 

colnames(rgs)

p.SES <- ggplot(rgs, aes(x=reorder(trait.plot_name, trait.order), y=rg.SES)) +
  geom_point(size = 1.25, 
             aes(y = rg.SES), shape=19, colour = "#000080")+
  geom_errorbar(aes(ymin=rg.SES-2*rg.SES.SE, ymax=rg.SES+2*rg.SES.SE), 
                width=.25) +
  ggtitle("rgs with SES") +
  labs(y = bquote('r'[g])) +
  theme_bw() +
  theme(axis.title.x = element_blank()) +
  geom_hline(yintercept=0, color = "black", size=0.3) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


pdf("5.SES_plot.rg_with_SES.ALL.20122019.pdf", width = 5, height = 3, useDingbats=FALSE)
grid.arrange(p.SES, nrow = 1)
dev.off()




##################################  FIGURE 3, h2 plot 

# activate libraries
library(ggplot2)
library(RColorBrewer)
library(corrplot)
library(gridExtra)
library(grid)


###

h2s <- read.csv("trait_h2s.ALL_corrected.09072019.csv",header=T,sep = ",")
head(h2s)
summary(h2s)

# compute p-values
colnames(h2s)
h2s$h2_P <- 2*pnorm(-abs(h2s$h2/h2s$h2_SE))
h2s$h2_SES_P <- 2*pnorm(-abs(h2s$h2_SES/h2s$h2_SES_SE))

# compute FDR-corrected p-values
h2s$h2_P.FDR <- p.adjust(h2s$h2_P, method = "fdr")
h2s$h2_SES_P.FDR <- p.adjust(h2s$h2_SES_P, method = "fdr")

# compute maximum values for figure
h2s$maxh2.SES <- pmax(h2s$h2,h2s$h2_SES)


trait_names <- as.data.frame(matrix(c("ADHD","Anxiety","MDD","Bip",
                                      "SCZ","Autism","Anorexia",
                                      "OCD","TS",
                                      "CanLife","AlcFreq","AlcQuan",
                                      "SI","AgeSI","CPD","Cess",
                                      "ADHD","AnxD","MD","BIP",
                                      "SCZ","ASD","AN",
                                      "OCD","TS",
                                      "Cannabis","AlcFreq","AlcQuan",
                                      "SmkInit","AgeSmk",
                                      "CigDay","SmkCes",
                                      1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16), 
                                    nrow = 16, ncol = 3))

colnames(trait_names) <- c("unix_name","trait.plot_name","trait.order")
h2s <- merge(h2s,trait_names,by.x = "trait",by.y = "unix_name")

h2s$h2 <- round(h2s$h2,digits=2)
h2s$h2_SES <- round(h2s$h2_SES,digits=2)

h2s$trait.order <- as.numeric(as.character(h2s$trait.order))

####

# plot 

p.SES <- ggplot(h2s, aes(x=reorder(trait.plot_name, trait.order), y=h2, yend=h2_SES)) +
  geom_linerange(aes(ymin = h2, 
                     ymax = h2_SES), colour = "#87CEFA") + 
  geom_point(size = 1.25, 
             aes(y = h2), shape=19, colour = "#000080")+
  geom_point(size = 1.25, 
             aes(y = h2_SES), shape=19, colour = "#87CEFA")+
  ylim(0,0.3) +
  ggtitle("Partialling out SES") +
  theme_bw() +
  theme(axis.title.x = element_blank()) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 


pdf("3.all_plots.h2.SES.18072019.pdf")
dev.off()


### plot with error bars

# SES
colnames(h2s)
h2s.normal <- h2s[c("trait.plot_name","trait.order","h2","h2_SE")]
h2s.SES <- h2s[c("trait.plot_name","trait.order","h2_SES","h2_SES_SE")]
h2s.normal$group <- "before correction"
h2s.SES$group <- "after correction"
colnames(h2s.normal) <- c("trait.plot_name","trait.order","h2","h2_SE","group")
colnames(h2s.SES) <- c("trait.plot_name","trait.order","h2","h2_SE","group")
h2s.SES.plot <- rbind(h2s.normal,h2s.SES)

p.SES <- ggplot(h2s.SES.plot, aes(x=reorder(trait.plot_name, trait.order), y=h2 , colour = group)) +
  geom_point(size = 1.25, 
             aes(y = h2), 
             shape=19, 
             position = position_dodge(width = -0.5))+
  geom_errorbar(aes(ymin=h2-2*h2_SE, ymax=h2+2*h2_SE), 
                width=.5,
                position = position_dodge(width = -0.5)) +
  ylim(0,0.3) +
  ggtitle("Partialling out SES") +
  theme(plot.title = element_text(hjust = 0.5, vjust = -11, size = 22)) +
  theme_bw() +
  theme(axis.title.x = element_blank()) +
  labs(y = bquote('SNP-h'^2)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_colour_manual(values = c("#87CEFA","#000080")) + 
  theme(legend.position = "none")


pdf("3.2.SES_plot.h2.ALL.error_bars.11122019.pdf", width = 5, height = 3, useDingbats=FALSE)
grid.arrange(p.SES, nrow = 1)
dev.off()




################################## FIGURE 4, lollipop plots

# activate libraries
library(ggplot2)
library(RColorBrewer)
library(corrplot)
library(gridExtra)
library(grid)


###

# read in correlation matrices

rgs.raw <- read.csv("Correlation_matrix.csv",header=T,sep = ",")
rgs.SES <- read.csv("SES_pcor_rg_matrix.csv",header=T,sep = ",")
rownames(rgs.raw) <- rgs.raw$X
rownames(rgs.SES) <- rgs.SES$X
rgs.raw$X <- NULL
rgs.SES$X <- NULL
diag(rgs.raw) <- 1
diag(rgs.SES) <- 1

SEs.raw <- read.csv("Correlation_SE_matrix.csv",header=T,sep = ",")
SEs.SES <- read.csv("SES_pcorSE_matrix.csv",header=T,sep = ",")
rownames(SEs.raw) <- SEs.raw$X
rownames(SEs.SES) <- SEs.SES$X
SEs.raw$X <- NULL
SEs.SES$X <- NULL
diag(SEs.raw) <- 0
diag(SEs.SES) <- 0

# re-order rows & columns
colnames(rgs.raw)
order <- c("ADHD","Anxiety","MDD","Bip",
           "SCZ","Autism","Anorexia",
           "OCD","TS",
           "CanLife","Alc_freq","Alc_quan",
           "SI","AgeSI","CPD","Cess")
rgs.raw <- rgs.raw[order,order]
rgs.SES <- rgs.SES[order,order]

SEs.raw <- SEs.raw[order,order]
SEs.SES <- SEs.SES[order,order]

# re-name traits
library(data.table)
oldnames <- c("ADHD","Anxiety","MDD","Bip",
              "SCZ","Autism","Anorexia",
              "OCD","TS",
              "CanLife","Alc_freq","Alc_quan",
              "SI","AgeSI","CPD","Cess")
newnames <- c("ADHD","AnxD","MD","Bip",
              "SCZ","ASD","AN",
              "OCD","TS",
              "Cannabis","AlcFreq","AlcQuan",
              "SmkInit","AgeSmk","CigDay","SmkCes")
  
setnames(rgs.raw, old = oldnames, new = newnames)
setnames(rgs.SES, old = oldnames, new = newnames)

setnames(SEs.raw, old = oldnames, new = newnames)
setnames(SEs.SES, old = oldnames, new = newnames)

rownames(rgs.raw) <- colnames(rgs.raw)
rownames(rgs.SES) <- colnames(rgs.SES)

rownames(SEs.raw) <- colnames(SEs.raw)
rownames(SEs.SES) <- colnames(SEs.SES)

  ## read in all FDR-corrected p-values ##

# p-values of genetic correlations
rg.P.raw <- read.csv("rg.P.raw.FDR.csv",header=T,sep = ",")
rownames(rg.P.raw) <- rg.P.raw$X
rg.P.raw$X <- NULL
rg.P.SES <- read.csv("rg.P.SES.FDR.csv",header=T,sep = ",")
rownames(rg.P.SES) <- rg.P.SES$X
rg.P.SES$X <- NULL


# p-values of changes
change.P.SES <- read.csv("change.P.SES.FDR.csv",header=T,sep = ",")
rownames(change.P.SES) <- change.P.SES$X
change.P.SES$X <- NULL

####

# circle lollipop plot function

circle_lollipop <- function(rg.df,SE.df,change.P.df,rg.P.df,rg.trait) { 
  # extract columns for dataframe for plot
  rg.df <- as.data.frame(t(rg.df[rg.trait,]))
  SE.df <- as.data.frame(t(SE.df[rg.trait,]))
  change.P.df <- as.data.frame(t(change.P.df[rg.trait,]))
  rg.P.df <- as.data.frame(t(rg.P.df[rg.trait,]))
  rg.raw.df <- as.data.frame(t(rgs.raw[rg.trait,]))
  SE.raw.df <- as.data.frame(t(SEs.raw[rg.trait,]))
  rg.P.raw.df <- as.data.frame(t(rg.P.raw[rg.trait,]))
  rg.df <- cbind(rg.raw.df,SE.raw.df,rg.df,SE.df,change.P.df,rg.P.raw.df,rg.P.df)
  colnames(rg.df) <- c("uncorrected.rg","uncorrected.SE","partial.rg","partial.SE","change.p.fdr","uncorrected.P.fdr","partial.P.fdr")
  # compute p-values of rgs
  rg.df$trait <- rownames(rg.df)
  rg.df <- rg.df[which(rg.df$trait != rg.trait),]
  rg.df$maxrg <- pmax(rg.df$uncorrected.rg,rg.df$partial.rg)

  ###########################################################
  # ----- This section prepare a dataframe for labels ---- #
  rg.df$id = 1:dim(rg.df)[1]
  
  # Get the name and the y position of each label
  label_data=rg.df
  
  # get plot title
  plot.title = rg.trait
  
  # calculate the ANGLE of the labels
  number_of_bar=nrow(label_data)
  angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
  
  # calculate the alignment of labels: right or left
  # If I am on the left part of the plot, my labels have currently an angle < -90
  label_data$hjust<-ifelse( angle < -90, 1, 0)
  
  # flip angle BY to make them readable
  label_data$angle<-ifelse(angle < -90, angle+180, angle)
  # ------------------------------------------------------- #
  ###########################################################
  
  ggplot(rg.df, aes(x=as.factor(id), y=uncorrected.rg, yend=partial.rg)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
    geom_rect(xmin=c(0), xmax=c(15), ymin=c(-1), ymax=c(0), fill="#FAF0E6", alpha = 0.1) +
    geom_rect(xmin=c(0), xmax=c(15), ymin=c(0), ymax=c(1), fill="#E0FFFF", alpha = 0.1) +
    geom_linerange(aes(x = as.factor(id), 
                       ymin = uncorrected.rg, 
                       ymax = partial.rg), colour = "#A2B5CD") + 
    geom_point(size = 4, 
               aes(x = as.factor(id), y = uncorrected.rg), shape=19, 
               color=ifelse(rg.df$uncorrected.P.fdr < .05,"#FF0000", NA))+
    geom_point(size = 3, 
               aes(x = as.factor(id), y = uncorrected.rg), shape=19, colour = "#000080")+
    geom_point(size = 4, 
               aes(x = as.factor(id), y = partial.rg), shape=19, 
               color=ifelse(rg.df$uncorrected.P.fdr < .05,"#FF0000", NA))+
    geom_point(size = 3, 
               aes(x = as.factor(id), y = partial.rg), shape=19, colour = "#87CEFA")+
    # This add the bars with a blue color
    # Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar
    ylim(-1,1) +
    # Customize the theme
    theme_minimal() +
    theme(panel.grid  = element_blank(),
          axis.text = element_blank(),
          axis.title = element_blank(),
          plot.margin = unit(rep(0,4), "cm")     # This remove unnecessary margin around plot
    ) +
    # draw 0-axis line
    geom_hline(yintercept=-1, color = "grey", size=0.3) +
    geom_hline(yintercept=-0.5, color = "grey", size=0.3) +
    geom_hline(yintercept=0, color = "black", size=0.3) +
    geom_hline(yintercept=0.5, color = "grey", size=0.3) +
    geom_hline(yintercept=1, color = "grey", size=0.3) +
    geom_vline(xintercept=0.5, color = "grey", size=0.3) +
    geom_text(aes(x=0.5, y = -1,label = "      -1"), colour = "gray22", size = 3.5) +
    geom_text(aes(x=0.5, y = -0.5,label = "        -0.5"), colour = "gray22", size = 3.5) +
    geom_text(aes(x=0.5, y = 0,label = "      0"), colour = "gray22", size = 3.5) +
    geom_text(aes(x=0.5, y = 0.5,label = "        0.5"), colour = "gray22", size = 3.5) +
    geom_text(aes(x=0.5, y = 1,label = "      1"), colour = "gray22", size = 3.5) +
    # fix title
    ggtitle(plot.title) +
    theme(plot.title = element_text(hjust = 0.5, vjust = -11, size = 22)) +
    # This makes the coordinate polar instead of cartesian.
    coord_polar(start = 0, clip = "on") +
    geom_text(data=label_data, 
              aes(x=id, y=maxrg+0.1 , label=trait, hjust=hjust), 
              color=ifelse(rg.df$change.p.fdr < .05,"#FF0000", "black"), 
              fontface="bold",
              alpha=0.6, 
              size=5, 
              angle= label_data$angle, 
              inherit.aes = FALSE )
}

####

# make circle lollipop plot for SES

p.ADHD.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"ADHD")
p.AnxD.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"AnxD")
p.MD.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"MD")
p.Bip.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"Bip")
p.SCZ.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"SCZ")
p.ASD.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"ASD")
p.AN.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"AN")
p.OCD.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"OCD")
p.TS.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"TS")
p.Cannabis.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"Cannabis")
p.AlcFreq.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"AlcFreq")
p.AlcQuan.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"AlcQuan")
p.SmkInit.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"SmkInit")
p.AgeSmk.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"AgeSmk")
p.CigDay.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"CigDay")
p.SmkCes.SES <- circle_lollipop(rgs.SES,SEs.SES,change.P.SES,rg.P.SES,"SmkCes")

blank <- grid.rect(gp=gpar(col="white"))

pdf("2.all_plots.SES.change_significance.FDR_120.19122019.pdf", width = 25, height = 25, useDingbats=FALSE)
grid.arrange(p.ADHD.SES,
             p.AnxD.SES,
             p.MD.SES,
             p.Bip.SES,
             p.SCZ.SES,
             p.ASD.SES,
             p.AN.SES,
             p.OCD.SES,
             p.TS.SES,
             p.Cannabis.SES,
             p.AlcFreq.SES,
             p.AlcQuan.SES,
             p.SmkInit.SES,
             p.AgeSmk.SES,
             p.CigDay.SES,
             p.SmkCes.SES, nrow = 4)
dev.off()





################################ Figure 5, cluster plot

# activate libraries
library(igraph)

M = read.table('rg_sub.txt',header=T,quote='\"',sep="\t")
for (row in 1:(nrow(M)-1)) {
  for (col in (row+1):ncol(M)) {
    M[row,col] = M[col,row]
  }
}
colstr = colnames(M)

P = read.table('rg_sub_pvalues.txt',header=T,quote='\"',sep="\t")
for (row in 1:(nrow(P)-1)) {
  for (col in (row+1):ncol(P)) {
    P[row,col] = P[col,row]
  }
}
P_adj = P
P_adj[lower.tri(P_adj)] = p.adjust(P[lower.tri(P)],"bonferroni")
P_adj[upper.tri(P_adj)] = p.adjust(P[upper.tri(P)],"bonferroni")
ndx = p.adjust(P[lower.tri(P)],"BH")<.05


nicestr = c("Alc\nFreq""Smk\nInit, etc..")

tmpcolorpalette = colorRampPalette(brewer.pal(n = 9, name = "PuOr"))
rampcol_edges = tmpcolorpalette(101)

# create nodes struct
nodes = data.frame(colstr)
nodes$class = c("psychiatric","alcohol",
                "cannabis","smoking",etc...)
nodes$color = rgb(0,0,0,alpha=0)

cnt = 0
n = nrow(M)*(ncol(M)-1)/2
from <- character(1)
to <- character(1)
type <- character(1)
weight <- numeric(1)
for (row in 1:(nrow(M)-1)) {
  for (col in (row+1):ncol(M)) {
    if (P_adj[row,col]<.05) {
      cnt = cnt + 1
      # create the links struct
      from[cnt] = colstr[row]
      to[cnt] = colstr[col]
      type[cnt] = 'corr'
      weight[cnt] = M[row,col]
    }
  }
}
links = data.frame(from,to,type,weight)
links$saveweight = links$weight

# use the squared weight for layout, and use saveweight for labelling
links$weight = links$weight^2
net <- graph_from_data_frame(d=links, vertices=nodes, directed=F)

# layout
l = layout_with_fr(net)

# clustering
clust = cluster_fast_greedy(simplify(net))

# color the edges with same as Cell report color scheme.
for (i in 1:length(E(net))) {
  # weights scaled from -1 to 1
  E(net)[[i]]$color = rampcol_edges[round(E(net)[[i]]$saveweight*50)+50]
}

# color the edges with same as Cell report color scheme
for (i in 1:length(V(net))) {
  # weights scaled from -1 to 1
  V(net)[[i]]$color = rgb(1,1,1)
}


par(mar=c(0,0,0,0))

plot(net, edge.curved=F,
  layout=l,
  edge.width = sqrt(links$weight)*10,
  edge.label = sprintf('%.2f',links$saveweight),
  edge.label.cex = .6,
  edge.label.font = 1,
  edge.label.family='sans',
  vertex.size = 18,
  vertex.label = nicestr,
  vertex.label.cex=.8,
  vertex.label.family="sans",
  vertex.label.font=1,
  vertex.label.color=rgb(0,0,0),
  vertex.label.bkcolor=rgb(1,1,1),
  mark.groups = list(which(clust$membership==1),which(clust$membership==2),which(clust$membership==3)),
  mark.border = 'black',
  mark.shape = 1,
  mark.expand = c(28,40,24,24),
)






############################################ Extended Data Figure 6, scatterplot for SES partialled out

# activate libraries
library(ggplot2)
library(RColorBrewer)
library(corrplot)
library(gridExtra)
library(grid)


###

# read in correlation matrices

rgs.raw <- read.csv("files_sign_15102019/rgs/Correlation_matrix.csv",header=T,sep = ",")
rgs.EA <- read.csv("files_sign_15102019/rgs/EA_pcor_rg_matrix.csv",header=T,sep = ",")
rgs.HI <- read.csv("files_sign_15102019/rgs/HI_pcor_rg_matrix.csv",header=T,sep = ",")
rgs.TI <- read.csv("files_sign_15102019/rgs/TI_pcor_rg_matrix.csv",header=T,sep = ",")
rgs.SES <- read.csv("files_sign_15102019/rgs/SES_pcor_rg_matrix.csv",header=T,sep = ",")
rownames(rgs.raw) <- rgs.raw$X
rownames(rgs.EA) <- rgs.EA$X
rownames(rgs.HI) <- rgs.HI$X
rownames(rgs.TI) <- rgs.TI$X
rownames(rgs.SES) <- rgs.SES$X
rgs.raw$X <- NULL
rgs.EA$X <- NULL
rgs.HI$X <- NULL
rgs.TI$X <- NULL
rgs.SES$X <- NULL
diag(rgs.raw) <- 1
diag(rgs.EA) <- 1
diag(rgs.HI) <- 1
diag(rgs.TI) <- 1
diag(rgs.SES) <- 1

SEs.raw <- read.csv("files_sign_15102019/rg_SE/Correlation_SE_matrix.csv",header=T,sep = ",")
SEs.EA <- read.csv("files_sign_15102019/rg_SE/EA_pcorSE_matrix.csv",header=T,sep = ",")
SEs.HI <- read.csv("files_sign_15102019/rg_SE/HI_pcorSE_matrix.csv",header=T,sep = ",")
SEs.TI <- read.csv("files_sign_15102019/rg_SE/TI_pcorSE_matrix.csv",header=T,sep = ",")
SEs.SES <- read.csv("files_sign_15102019/rg_SE/SES_pcorSE_matrix.csv",header=T,sep = ",")
rownames(SEs.raw) <- SEs.raw$X
rownames(SEs.EA) <- SEs.EA$X
rownames(SEs.HI) <- SEs.HI$X
rownames(SEs.TI) <- SEs.TI$X
rownames(SEs.SES) <- SEs.SES$X
SEs.raw$X <- NULL
SEs.EA$X <- NULL
SEs.HI$X <- NULL
SEs.TI$X <- NULL
SEs.SES$X <- NULL
diag(SEs.raw) <- 0
diag(SEs.EA) <- 0
diag(SEs.HI) <- 0
diag(SEs.TI) <- 0
diag(SEs.SES) <- 0


# re-order rows & columns
colnames(rgs.raw)
order <- c("ADHD","Anxiety","MDD","Bip",
           "SCZ","Autism","Anorexia",
           "OCD","TS",
           "CanLife","Alc_freq","Alc_quan",
           "SI","AgeSI","CPD","Cess")
rgs.raw <- rgs.raw[order,order]
rgs.EA <- rgs.EA[order,order]
rgs.HI <- rgs.HI[order,order]
rgs.TI <- rgs.TI[order,order]
rgs.SES <- rgs.SES[order,order]

SEs.raw <- SEs.raw[order,order]
SEs.EA <- SEs.EA[order,order]
SEs.HI <- SEs.HI[order,order]
SEs.TI <- SEs.TI[order,order]
SEs.SES <- SEs.SES[order,order]

# re-name traits
library(data.table)
oldnames <- c("ADHD","Anxiety","MDD","Bip",
              "SCZ","Autism","Anorexia",
              "OCD","TS",
              "CanLife","Alc_freq","Alc_quan",
              "SI","AgeSI","CPD","Cess")
newnames <- c("ADHD","AnxD","MD","Bip",
              "SCZ","ASD","AN",
              "OCD","TS",
              "Cannabis","AlcFreq","AlcQuan",
              "SmkInit","AgeSmk","CigDay","SmkCes")
  
setnames(rgs.raw, old = oldnames, new = newnames)
setnames(rgs.EA, old = oldnames, new = newnames)
setnames(rgs.HI, old = oldnames, new = newnames)
setnames(rgs.TI, old = oldnames, new = newnames)
setnames(rgs.SES, old = oldnames, new = newnames)

setnames(SEs.raw, old = oldnames, new = newnames)
setnames(SEs.EA, old = oldnames, new = newnames)
setnames(SEs.HI, old = oldnames, new = newnames)
setnames(SEs.TI, old = oldnames, new = newnames)
setnames(SEs.SES, old = oldnames, new = newnames)

rownames(rgs.raw) <- colnames(rgs.raw)
rownames(rgs.EA) <- colnames(rgs.EA)
rownames(rgs.HI) <- colnames(rgs.HI)
rownames(rgs.TI) <- colnames(rgs.TI)
rownames(rgs.SES) <- colnames(rgs.SES)

rownames(SEs.raw) <- colnames(SEs.raw)
rownames(SEs.EA) <- colnames(SEs.EA)
rownames(SEs.HI) <- colnames(SEs.HI)
rownames(SEs.TI) <- colnames(SEs.TI)
rownames(SEs.SES) <- colnames(SEs.SES)

# p-values of changes
change.P.EA <- read.csv("files_sign_15102019/FDR_corrected_significance/change.P.EA.FDR.csv",header=T,sep = ",")
rownames(change.P.EA) <- change.P.EA$X
change.P.EA$X <- NULL
change.P.SES <- read.csv("files_sign_15102019/FDR_corrected_significance/change.P.SES.FDR.csv",header=T,sep = ",")
rownames(change.P.SES) <- change.P.SES$X
change.P.SES$X <- NULL
change.P.HI <- read.csv("files_sign_15102019/FDR_corrected_significance/change.P.HI.FDR.csv",header=T,sep = ",")
rownames(change.P.HI) <- change.P.HI$X
change.P.HI$X <- NULL
change.P.TI <- read.csv("files_sign_15102019/FDR_corrected_significance/change.P.TI.FDR.csv",header=T,sep = ",")
rownames(change.P.TI) <- change.P.TI$X
change.P.TI$X <- NULL


#########################################################################################################

# restructure for scatterplot

# rgs
rgs.raw.restructured <- rbind(as.matrix(rgs.raw[,1]),
                              as.matrix(rgs.raw[,2]),
                              as.matrix(rgs.raw[,3]),
                              as.matrix(rgs.raw[,4]),
                              as.matrix(rgs.raw[,5]),
                              as.matrix(rgs.raw[,6]),
                              as.matrix(rgs.raw[,7]),
                              as.matrix(rgs.raw[,8]),
                              as.matrix(rgs.raw[,9]),
                              as.matrix(rgs.raw[,10]),
                              as.matrix(rgs.raw[,11]),
                              as.matrix(rgs.raw[,12]),
                              as.matrix(rgs.raw[,13]),
                              as.matrix(rgs.raw[,14]),
                              as.matrix(rgs.raw[,15]),
                              as.matrix(rgs.raw[,16]))

rgs.EA.restructured <- rbind(as.matrix(rgs.EA[,1]),
                              as.matrix(rgs.EA[,2]),
                              as.matrix(rgs.EA[,3]),
                              as.matrix(rgs.EA[,4]),
                              as.matrix(rgs.EA[,5]),
                              as.matrix(rgs.EA[,6]),
                              as.matrix(rgs.EA[,7]),
                              as.matrix(rgs.EA[,8]),
                              as.matrix(rgs.EA[,9]),
                              as.matrix(rgs.EA[,10]),
                              as.matrix(rgs.EA[,11]),
                              as.matrix(rgs.EA[,12]),
                              as.matrix(rgs.EA[,13]),
                              as.matrix(rgs.EA[,14]),
                              as.matrix(rgs.EA[,15]),
                              as.matrix(rgs.EA[,16]))

rgs.HI.restructured <- rbind(as.matrix(rgs.HI[,1]),
                              as.matrix(rgs.HI[,2]),
                              as.matrix(rgs.HI[,3]),
                              as.matrix(rgs.HI[,4]),
                              as.matrix(rgs.HI[,5]),
                              as.matrix(rgs.HI[,6]),
                              as.matrix(rgs.HI[,7]),
                              as.matrix(rgs.HI[,8]),
                              as.matrix(rgs.HI[,9]),
                              as.matrix(rgs.HI[,10]),
                              as.matrix(rgs.HI[,11]),
                              as.matrix(rgs.HI[,12]),
                              as.matrix(rgs.HI[,13]),
                              as.matrix(rgs.HI[,14]),
                              as.matrix(rgs.HI[,15]),
                              as.matrix(rgs.HI[,16]))

rgs.TI.restructured <- rbind(as.matrix(rgs.TI[,1]),
                              as.matrix(rgs.TI[,2]),
                              as.matrix(rgs.TI[,3]),
                              as.matrix(rgs.TI[,4]),
                              as.matrix(rgs.TI[,5]),
                              as.matrix(rgs.TI[,6]),
                              as.matrix(rgs.TI[,7]),
                              as.matrix(rgs.TI[,8]),
                              as.matrix(rgs.TI[,9]),
                              as.matrix(rgs.TI[,10]),
                              as.matrix(rgs.TI[,11]),
                              as.matrix(rgs.TI[,12]),
                              as.matrix(rgs.TI[,13]),
                              as.matrix(rgs.TI[,14]),
                              as.matrix(rgs.TI[,15]),
                              as.matrix(rgs.TI[,16]))

rgs.SES.restructured <- rbind(as.matrix(rgs.SES[,1]),
                              as.matrix(rgs.SES[,2]),
                              as.matrix(rgs.SES[,3]),
                              as.matrix(rgs.SES[,4]),
                              as.matrix(rgs.SES[,5]),
                              as.matrix(rgs.SES[,6]),
                              as.matrix(rgs.SES[,7]),
                              as.matrix(rgs.SES[,8]),
                              as.matrix(rgs.SES[,9]),
                              as.matrix(rgs.SES[,10]),
                              as.matrix(rgs.SES[,11]),
                              as.matrix(rgs.SES[,12]),
                              as.matrix(rgs.SES[,13]),
                              as.matrix(rgs.SES[,14]),
                              as.matrix(rgs.SES[,15]),
                              as.matrix(rgs.SES[,16]))

rgs.restructured <- as.data.frame(cbind(rgs.raw.restructured,
                                        rgs.EA.restructured,
                                        rgs.HI.restructured,
                                        rgs.TI.restructured,
                                        rgs.SES.restructured))
colnames(rgs.restructured) <- c("rg",
                                "rg.EA_corrected",
                                "rg.HI_corrected",
                                "rg.TI_corrected",
                                "rg.SES_corrected")

Nth.delete<-function(dataframe, n)dataframe[-(seq(n,to=nrow(dataframe),by=n)),]
rgs.restructured <- rgs.restructured[-1,]
rgs.restructured <- Nth.delete(rgs.restructured, 17)

# rgs.restructured <- rgs.restructured[which(rgs.restructured$rg != 1),]

# SEs
SEs.raw.restructured <- rbind(as.matrix(SEs.raw[,1]),
                              as.matrix(SEs.raw[,2]),
                              as.matrix(SEs.raw[,3]),
                              as.matrix(SEs.raw[,4]),
                              as.matrix(SEs.raw[,5]),
                              as.matrix(SEs.raw[,6]),
                              as.matrix(SEs.raw[,7]),
                              as.matrix(SEs.raw[,8]),
                              as.matrix(SEs.raw[,9]),
                              as.matrix(SEs.raw[,10]),
                              as.matrix(SEs.raw[,11]),
                              as.matrix(SEs.raw[,12]),
                              as.matrix(SEs.raw[,13]),
                              as.matrix(SEs.raw[,14]),
                              as.matrix(SEs.raw[,15]),
                              as.matrix(SEs.raw[,16]))

SEs.EA.restructured <- rbind(as.matrix(SEs.EA[,1]),
                             as.matrix(SEs.EA[,2]),
                             as.matrix(SEs.EA[,3]),
                             as.matrix(SEs.EA[,4]),
                             as.matrix(SEs.EA[,5]),
                             as.matrix(SEs.EA[,6]),
                             as.matrix(SEs.EA[,7]),
                             as.matrix(SEs.EA[,8]),
                             as.matrix(SEs.EA[,9]),
                             as.matrix(SEs.EA[,10]),
                             as.matrix(SEs.EA[,11]),
                             as.matrix(SEs.EA[,12]),
                             as.matrix(SEs.EA[,13]),
                             as.matrix(SEs.EA[,14]),
                             as.matrix(SEs.EA[,15]),
                             as.matrix(SEs.EA[,16]))

SEs.HI.restructured <- rbind(as.matrix(SEs.HI[,1]),
                             as.matrix(SEs.HI[,2]),
                             as.matrix(SEs.HI[,3]),
                             as.matrix(SEs.HI[,4]),
                             as.matrix(SEs.HI[,5]),
                             as.matrix(SEs.HI[,6]),
                             as.matrix(SEs.HI[,7]),
                             as.matrix(SEs.HI[,8]),
                             as.matrix(SEs.HI[,9]),
                             as.matrix(SEs.HI[,10]),
                             as.matrix(SEs.HI[,11]),
                             as.matrix(SEs.HI[,12]),
                             as.matrix(SEs.HI[,13]),
                             as.matrix(SEs.HI[,14]),
                             as.matrix(SEs.HI[,15]),
                             as.matrix(SEs.HI[,16]))

SEs.TI.restructured <- rbind(as.matrix(SEs.TI[,1]),
                             as.matrix(SEs.TI[,2]),
                             as.matrix(SEs.TI[,3]),
                             as.matrix(SEs.TI[,4]),
                             as.matrix(SEs.TI[,5]),
                             as.matrix(SEs.TI[,6]),
                             as.matrix(SEs.TI[,7]),
                             as.matrix(SEs.TI[,8]),
                             as.matrix(SEs.TI[,9]),
                             as.matrix(SEs.TI[,10]),
                             as.matrix(SEs.TI[,11]),
                             as.matrix(SEs.TI[,12]),
                             as.matrix(SEs.TI[,13]),
                             as.matrix(SEs.TI[,14]),
                             as.matrix(SEs.TI[,15]),
                             as.matrix(SEs.TI[,16]))

SEs.SES.restructured <- rbind(as.matrix(SEs.SES[,1]),
                              as.matrix(SEs.SES[,2]),
                              as.matrix(SEs.SES[,3]),
                              as.matrix(SEs.SES[,4]),
                              as.matrix(SEs.SES[,5]),
                              as.matrix(SEs.SES[,6]),
                              as.matrix(SEs.SES[,7]),
                              as.matrix(SEs.SES[,8]),
                              as.matrix(SEs.SES[,9]),
                              as.matrix(SEs.SES[,10]),
                              as.matrix(SEs.SES[,11]),
                              as.matrix(SEs.SES[,12]),
                              as.matrix(SEs.SES[,13]),
                              as.matrix(SEs.SES[,14]),
                              as.matrix(SEs.SES[,15]),
                              as.matrix(SEs.SES[,16]))

SEs.restructured <- as.data.frame(cbind(SEs.raw.restructured,
                                        SEs.EA.restructured,
                                        SEs.HI.restructured,
                                        SEs.TI.restructured,
                                        SEs.SES.restructured))
colnames(SEs.restructured) <- c("SE",
                                "SE.EA_corrected",
                                "SE.HI_corrected",
                                "SE.TI_corrected",
                                "SE.SES_corrected")

Nth.delete<-function(dataframe, n)dataframe[-(seq(n,to=nrow(dataframe),by=n)),]
SEs.restructured <- SEs.restructured[-1,]
SEs.restructured <- Nth.delete(SEs.restructured, 17)

# SEs.restructured <- SEs.restructured[which(SEs.restructured$SE != 0),]

# p-values
change.P.EA.restructured <- rbind(as.matrix(change.P.EA[,1]),
                             as.matrix(change.P.EA[,2]),
                             as.matrix(change.P.EA[,3]),
                             as.matrix(change.P.EA[,4]),
                             as.matrix(change.P.EA[,5]),
                             as.matrix(change.P.EA[,6]),
                             as.matrix(change.P.EA[,7]),
                             as.matrix(change.P.EA[,8]),
                             as.matrix(change.P.EA[,9]),
                             as.matrix(change.P.EA[,10]),
                             as.matrix(change.P.EA[,11]),
                             as.matrix(change.P.EA[,12]),
                             as.matrix(change.P.EA[,13]),
                             as.matrix(change.P.EA[,14]),
                             as.matrix(change.P.EA[,15]),
                             as.matrix(change.P.EA[,16]))

change.P.HI.restructured <- rbind(as.matrix(change.P.HI[,1]),
                             as.matrix(change.P.HI[,2]),
                             as.matrix(change.P.HI[,3]),
                             as.matrix(change.P.HI[,4]),
                             as.matrix(change.P.HI[,5]),
                             as.matrix(change.P.HI[,6]),
                             as.matrix(change.P.HI[,7]),
                             as.matrix(change.P.HI[,8]),
                             as.matrix(change.P.HI[,9]),
                             as.matrix(change.P.HI[,10]),
                             as.matrix(change.P.HI[,11]),
                             as.matrix(change.P.HI[,12]),
                             as.matrix(change.P.HI[,13]),
                             as.matrix(change.P.HI[,14]),
                             as.matrix(change.P.HI[,15]),
                             as.matrix(change.P.HI[,16]))

change.P.TI.restructured <- rbind(as.matrix(change.P.TI[,1]),
                             as.matrix(change.P.TI[,2]),
                             as.matrix(change.P.TI[,3]),
                             as.matrix(change.P.TI[,4]),
                             as.matrix(change.P.TI[,5]),
                             as.matrix(change.P.TI[,6]),
                             as.matrix(change.P.TI[,7]),
                             as.matrix(change.P.TI[,8]),
                             as.matrix(change.P.TI[,9]),
                             as.matrix(change.P.TI[,10]),
                             as.matrix(change.P.TI[,11]),
                             as.matrix(change.P.TI[,12]),
                             as.matrix(change.P.TI[,13]),
                             as.matrix(change.P.TI[,14]),
                             as.matrix(change.P.TI[,15]),
                             as.matrix(change.P.TI[,16]))

change.P.SES.restructured <- rbind(as.matrix(change.P.SES[,1]),
                              as.matrix(change.P.SES[,2]),
                              as.matrix(change.P.SES[,3]),
                              as.matrix(change.P.SES[,4]),
                              as.matrix(change.P.SES[,5]),
                              as.matrix(change.P.SES[,6]),
                              as.matrix(change.P.SES[,7]),
                              as.matrix(change.P.SES[,8]),
                              as.matrix(change.P.SES[,9]),
                              as.matrix(change.P.SES[,10]),
                              as.matrix(change.P.SES[,11]),
                              as.matrix(change.P.SES[,12]),
                              as.matrix(change.P.SES[,13]),
                              as.matrix(change.P.SES[,14]),
                              as.matrix(change.P.SES[,15]),
                              as.matrix(change.P.SES[,16]))

change.P.restructured <- as.data.frame(cbind(change.P.EA.restructured,
                                        change.P.HI.restructured,
                                        change.P.TI.restructured,
                                        change.P.SES.restructured))
colnames(change.P.restructured) <- c("P.EA_corrected",
                                "P.HI_corrected",
                                "P.TI_corrected",
                                "P.SES_corrected")

Nth.delete<-function(dataframe, n)dataframe[-(seq(n,to=nrow(dataframe),by=n)),]
change.P.restructured <- change.P.restructured[-1,]
change.P.restructured <- Nth.delete(change.P.restructured, 17)

all.plot_data <- as.data.frame(cbind(rgs.restructured,
                                     SEs.restructured,
                                     change.P.restructured))
colnames(all.plot_data)

## plot ##

# colour significant values

pdf("6.2.rgs_scatterplot.SES.sig.FDR_120.19122019.pdf", width = 5, height = 5, useDingbats=FALSE)
ggplot(all.plot_data, aes(x=rg, y=rg.SES_corrected)) +
  geom_point(size=2, color=ifelse(all.plot_data$P.SES_corrected < .05, "red", "black")) +
  geom_abline(slope=1, intercept=0, color="blue") +
  xlim(-1,1) +
  ylim(-1,1) +
  theme_light() +
  xlab("rg") +
  ylab("Partial rg (SES removed)") +
  ggtitle("SES (r = .72)")
dev.off()






######################################## Extended Data Figure 7, correlation plots


# activate libraries
library(ggplot2)
library(RColorBrewer)
library(corrplot)

####

# read in correlation matrices

rgs.raw <- read.csv("files_sign_15102019/rgs/Correlation_matrix.csv",header=T,sep = ",")
rgs.SES <- read.csv("files_sign_15102019/rgs/SES_pcor_rg_matrix.csv",header=T,sep = ",")
rownames(rgs.raw) <- rgs.raw$X
rownames(rgs.SES) <- rgs.SES$X
rgs.raw$X <- NULL
rgs.SES$X <- NULL
diag(rgs.raw) <- 1
diag(rgs.SES) <- 1

SEs.raw <- read.csv("files_sign_15102019/rg_SE/Correlation_SE_matrix.csv",header=T,sep = ",")
SEs.SES <- read.csv("files_sign_15102019/rg_SE/SES_pcorSE_matrix.csv",header=T,sep = ",")
rownames(SEs.raw) <- SEs.raw$X
rownames(SEs.SES) <- SEs.SES$X
SEs.raw$X <- NULL
SEs.SES$X <- NULL
diag(SEs.raw) <- 0
diag(SEs.SES) <- 0

# re-order rows & columns
colnames(rgs.raw)
order <- c("ADHD","Anxiety","MDD","Bip",
           "SCZ","Autism","Anorexia",
           "OCD","TS",
           "CanLife","Alc_freq","Alc_quan",
           "SI","AgeSI","CPD","Cess")
rgs.raw <- rgs.raw[order,order]
rgs.SES <- rgs.SES[order,order]

SEs.raw <- SEs.raw[order,order]
SEs.SES <- SEs.SES[order,order]

# re-name traits
library(data.table)
oldnames <- c("ADHD","Anxiety","MDD","Bip",
              "SCZ","Autism","Anorexia",
              "OCD","TS",
              "CanLife","Alc_freq","Alc_quan",
              "SI","AgeSI","CPD","Cess")
newnames <- c("ADHD","AnxD","MD","Bip",
              "SCZ","ASD","AN",
              "OCD","TS",
              "Cannabis","AlcFreq","AlcQuan",
              "SmkInit","AgeSmk","CigDay","SmkCes")

setnames(rgs.raw, old = oldnames, new = newnames)
setnames(rgs.SES, old = oldnames, new = newnames)

setnames(SEs.raw, old = oldnames, new = newnames)
setnames(SEs.SES, old = oldnames, new = newnames)

rownames(rgs.raw) <- colnames(rgs.raw)
rownames(rgs.SES) <- colnames(rgs.SES)

rownames(SEs.raw) <- colnames(SEs.raw)
rownames(SEs.SES) <- colnames(SEs.SES)

rgs.regular.reshaped <- rgs.raw
rgs.SES.reshaped <- rgs.SES

# read in all FDR-corrected p-values
ps.regular.reshaped <- read.csv("files_sign_15102019/FDR_corrected_significance/rg.P.raw.FDR.csv",header=T,sep = ",")
rownames(ps.regular.reshaped) <- ps.regular.reshaped$X
ps.regular.reshaped$X <- NULL
ps.SES.reshaped <- read.csv("files_sign_15102019/FDR_corrected_significance/rg.P.SES.FDR.csv",header=T,sep = ",")
rownames(ps.SES.reshaped) <- ps.SES.reshaped$X
ps.SES.reshaped$X <- NULL


## make matrix with lower triangular being the original and upper triangular change 
# genetic correlations before and after SES correction
rgs.change.triang.SES <- rgs.SES.reshaped
rgs.change.triang.SES[lower.tri(rgs.regular.reshaped)] <- rgs.regular.reshaped[lower.tri(rgs.regular.reshaped)]
ps.change.triang.SES <- ps.SES.reshaped
ps.change.triang.SES[lower.tri(ps.regular.reshaped)] <- ps.regular.reshaped[lower.tri(ps.regular.reshaped)]


###

# plot

col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))

pdf("4.2.rgs.change.triang.SES.corrplot.FDR_120.05022019.pdf",
    width = 10, height = 10)
corrplot(as.matrix(rgs.change.triang.SES), method="color", col=col(200), 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black", tl.srt=45,
         p.mat = as.matrix(ps.change.triang.SES), sig.level = 0.05, insig = "blank")
dev.off()